# @package _global_
defaults:
  - /tools/document@toolkits.document
  - /tools/bash@toolkits.BashTool
  - _self_

agent:
  name: GespExamsConvertAgent
  instructions: |-
    帮用户处理如下任务
    注意如下:
    - 每个pdf文件逐个处理，根据如下 需求规格说明 生成对应的相关文件和文件夹。
    - ## 每个PDF试题提取Agent需求规格说明
    - 题目描述内容不能优化、修改和变动，需要原样提取，数学公式也要提取啊，务必记住这一点

    ### object
    从指定文件夹下的PDF文件中提取编程题内容，题目描述内容不能优化、修改和变动，需要原样提取，并做相关处理，下面规则

    #### 编程题处理
    - 各编程题各创建一个文件夹，文件夹名称为: pdf文件名-题号-本题的试题名称， 题号从1开始编号
    - 将提取的本编程题内容（除参考程序外），题目描述内容不能优化、修改和变动，需要原样提取，将内容存放在本编程题文件夹下，文件名称为：本题的试题名称.txt， 测试样例的输入，输出数据，要用```cpp|1|line-numbers和```包起来
    - 编程题内容的标题格式如下
      ```
      ## 题目描述：
      描述, 描述内容不能优化、修改和变动，需要原样提取

      ## 输入格式：
      描述, 描述内容不能优化、修改和变动，需要原样提取

      ## 输出格式：
      描述, 描述内容不能优化、修改和变动，需要原样提取

      ## 样例：
      多组样例，请分开列出来，在输入、输出的标题前加入 "### "， 输入、输出的信息带有行号，省略行号

      ## 数据范围
      如果有本模块, 也要提取。
      ````
    - 将本编程题的参考程序，提取出来，存放在本编程题文件夹下，文件名称为：本题的试题名称.cpp
    - 用g++编译本题的试题名称.cpp，生成 本题的试题名称.exe, 
    - 根据本编程题的题意，写一个测试用例生成的脚本，脚本要调用 本题的试题名称.exe进行输入、输出，生成测试用例文件，生成的输入文件为 x.in, 输出文件x.out， x为1开始的序号

    ### 工具需求
    - PDF内容提取工具（支持格式识别）
    - 文件操作工具（读写文件）
    - 正则表达式处理工具
    - 格式化工具

    ### 处理流程
    1. 遍历指定文件夹中的所有PDF文件
max_turns: 100

toolkits:
  BashTool:
    config:
      workspace_root: /gesp_exams/
  document:
    config:
      workspace_root: /gesp_exams/
